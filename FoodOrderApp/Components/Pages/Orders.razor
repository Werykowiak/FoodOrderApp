@using FoodOrderApp.Models
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject TeamsUserCredential teamsUserCredential
@inject IDialogService DialogService
<h3>Zamowienia</h3>
<FluentButton Appearance="Appearance.Accent" OnClick="ReLoadOrders">Odśwież</FluentButton>
@if (ordersId == null)
{
    <p>Ładowanie</p>
}
else if (ordersId.Count == 0)
{
    <p>Brak zamówień</p>
}
else
{
    <FluentAccordion >
    @foreach (int orderId in ordersId)
    {
        <FluentAccordionItem Heading="@orderId.ToString()">
        <OrderDetails OrderId="@orderId" UserId="@UserId" />
        </FluentAccordionItem>
    }
    </FluentAccordion>
}

@code {
    [Parameter]
    public string? UserId { get; set; }
    private List<int> ordersId;
    private double Cost { get; set; }
    private HubConnection hubConnection;
    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7230/orderHub"))
            .Build();
        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception on starting connection: {ex.Message}");
        }
        hubConnection.On("ReceiveOrdersChange", async () =>
        {
            Console.WriteLine("Received");
            await ReLoadOrders();
            await InvokeAsync(StateHasChanged);
        });
    }
    private async Task LoadOrders()
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        ordersId = await httpClient.GetFromJsonAsync<List<int>>("api/OrderModels/GetAllOrdersId");
    }
    public async Task ReLoadOrders()
    {
        ordersId = new List<int>();
        await LoadOrders();
        this.StateHasChanged();
    }
}
