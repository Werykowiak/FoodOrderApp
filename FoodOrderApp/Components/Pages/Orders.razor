@using FoodOrderApp.Models
@inject IHttpClientFactory HttpClientFactory
@inject TeamsUserCredential teamsUserCredential
<h3>Zamowienia</h3>
<button @onclick="ReLoadOrders">Odśwież</button>
@if(orders == null)
{
    <p>Ładowanie</p>
}else if(orders.Count == 0)
{
    <p>Brak zamówień</p>
}
else
{
    <FluentAccordion >
    @foreach(OrderModel order in orders)
    {
        <FluentAccordionItem Heading="@order.Id.ToString()">
            <p>Zamawiający: @order.Orderer</p>
            <p>Restauracja: @order.RestaurantName</p>
            <p>Minimalna wartość zamówienia: @order.MinCost</p>
            <p>Aktualna wartość zamówienia: @order.CurrentCost</p>
            @if (order.MinCost - order.CurrentCost > 0)
            {
                <p>Aby można było zamówić brakuje: @(order.MinCost - order.CurrentCost)</p>
            }
            @if (order.MinCostForFreeDelivery != null)
            {
                if (order.MinCostForFreeDelivery - order.CurrentCost > 0)
                {
                    <p>Opłata za dowóz: @order.DeliveryFee</p>
                    <p>Do darmowej dostawy brakuje: @(order.MinCostForFreeDelivery - order.CurrentCost)</p>
                }
                else
                {
                    <p>Dostawa jest darmowa</p>     
                }
            }
            <p>Numer telefonu zamawiającego: @order.PhoneNumber</p>
            @if (UserId == order.Orderer)
            {
                if (order.IsClosed)
                {
                    <FluentButton OnClick="@(e => OpenOrder(order))">Otwórz ponownie zamówienie</FluentButton>
                }
                else
                {
                    <FluentButton OnClick="@(e => CloseOrder(order))">Zamknij zamówienie</FluentButton>
                }
                
            }
            <OrderPositions OrderId="@order.Id" UserId="@UserId" IsClosed="@order.IsClosed" Parent="@this" OrdererId="@order.Orderer"/>
        </FluentAccordionItem>
    }
    </FluentAccordion>
}

@code {
    [Parameter]
    public string? UserId { get; set; }
    private List<OrderModel> orders;
    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }
    private async Task LoadOrders()
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        orders = await httpClient.GetFromJsonAsync<List<OrderModel>>("api/OrderModels");
    }
    public async Task ReLoadOrders()
    {
        orders = new List<OrderModel>();
        await LoadOrders();
    }
    private async Task GetUser(string userId)
    {

    }
    private async Task CloseOrder(OrderModel order)
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var orders = await httpClient.PutAsJsonAsync($"api/OrderModels/{order.Id}/ChangeState/true",order);
    }
    private async Task OpenOrder(OrderModel order)
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var orders = await httpClient.PutAsJsonAsync($"api/OrderModels/{order.Id}/ChangeState/false", order);
    }
}
