@using FoodOrderApp.Models
@inject IHttpClientFactory HttpClientFactory
@inject TeamsUserCredential teamsUserCredential
@inject IDialogService DialogService
<h3>Zamowienia</h3>
<FluentButton Appearance="Appearance.Accent" OnClick="ReLoadOrders">Odśwież</FluentButton>
@if (ordersId == null)
{
    <p>Ładowanie</p>
}
else if (ordersId.Count == 0)
{
    <p>Brak zamówień</p>
}
else
{
    <FluentAccordion >
    @foreach (int orderId in ordersId)
    {
        <FluentAccordionItem Heading="@orderId.ToString()">
        <OrderDetails OrderId="@orderId" UserId="@UserId" />
        </FluentAccordionItem>
    }
    </FluentAccordion>
}

@code {
    [Parameter]
    public string? UserId { get; set; }
    private List<int> ordersId;
    private double Cost { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }
    private async Task LoadOrders()
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        ordersId = await httpClient.GetFromJsonAsync<List<int>>("api/OrderModels/GetAllOrdersId");
    }
    public async Task ReLoadOrders()
    {
        ordersId = new List<int>();
        await LoadOrders();
    }
    private async Task CloseOrder(OrderModel order)
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var orders = await httpClient.PutAsJsonAsync($"api/OrderModels/{order.Id}/ChangeState/true",order);
    }
    private async Task OpenOrder(OrderModel order)
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var orders = await httpClient.PutAsJsonAsync($"api/OrderModels/{order.Id}/ChangeState/false", order);
    }
    private async Task GetCost(int orderId)
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var ordersCost = await httpClient.GetFromJsonAsync<double>($"api/OrderModels/{orderId}/GetUserCostForOrder/{UserId}");
        Cost = Math.Round(ordersCost,2);
    }
    private async Task EditAsync(OrderModel order)
    {

        var data = new OrderModel(order);

        var dialog = await DialogService.ShowDialogAsync<EditOrder>(data, new DialogParameters()
            {
                Height = "400px",
                //Title = $"Edycja pozycji",
                PreventDismissOnOverlayClick = false,
                PreventScroll = true,
            });
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            order = (OrderModel)result.Data;
            await UpdateOrder(order);
        }
    }
    private async Task UpdateOrder(OrderModel order)
    {
        var httpclient = HttpClientFactory.CreateClient("FoodOrderApi");
        var result = await httpclient.PutAsJsonAsync($"api/OrderModels/{order.Id}",order);
    }
}
