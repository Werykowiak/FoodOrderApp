@using FoodOrderApp.Models
@implements IDialogContentComponent<OrderModel>

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>
<FluentDialogBody>
    <EditForm Model="@Content">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            Nazwa Restauracji:
            <InputText @bind-Value="Content.RestaurantName" />
            <ValidationMessage For="() => Content.RestaurantName" />
        </div>
        <div>
            Minimalna wartość zamówienia:
            <InputNumber @bind-Value="Content.MinCost" />
            <ValidationMessage For="() => Content.MinCost" />
        </div>
        <div>
            Koszt dostawy:
            <InputNumber @bind-Value="Content.DeliveryFee" />
            <ValidationMessage For="() => Content.DeliveryFee" />
        </div>
        <div>
            Darmowy dowóz od:
            <InputNumber @bind-Value="Content.MinCostForFreeDelivery" />
            <ValidationMessage For="() => Content.MinCostForFreeDelivery" />
        </div>
        <div>
            Numer telefonu:
            <InputText @bind-Value="Content.PhoneNumber" />
            <ValidationMessage For="() => Content.PhoneNumber" />
        </div>
        <div>
            Numer konta bankowego:
            <InputText @bind-Value="Content.AccountNumber" />
            <ValidationMessage For="() => Content.AccountNumber" />
        </div>
    </EditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent"
                  Disabled="@(!_editContext.Validate())"
                  OnClick="@SaveAsync">
        Save
    </FluentButton>
    <FluentButton Appearance="Appearance.Neutral"
                  OnClick="@CancelAsync">
        Cancel
    </FluentButton>
</FluentDialogFooter>

@code {
    [Parameter]
    public OrderModel Content { get; set; }
    private EditContext _editContext = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Content);
    }

    private async Task SaveAsync()
    {
        if (_editContext.Validate())
        {
            await Dialog.CloseAsync(Content);
        }
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}
