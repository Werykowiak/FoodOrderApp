@using FoodOrderApp.Models
@using System.Net
@using Newtonsoft.Json

@inject TeamsUserCredential teamsUserCredential
@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService
@inject IToastService ToastService
@if (Position != null)
{
    <hr />
    @if (UserId == Position.UserId)
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="@EditAsync">Edit</FluentButton>
    }
    <p>Uzytkownik: @Position.UserName</p>
    <p>Tresc zamowienia: @Position.Position</p>
    @if (Position.Additives != null)
    {
        <p>Dodatki: @Position.Additives</p>
    }
    <p>Koszt: @Position.Cost</p>
    @if (Position.IsPaid)
    {
        <p style="color:green">Opłacone</p>
    }
    else
    {
        <p style="color:red">Nieopłacone</p>
    }
    @if (Position.Comment != null)
    {
        if (UserId == OrdererId)
        {
            <p>Komentarz: @Position.Comment</p>
            <FluentButton Appearance="Appearance.Accent" OnClick="@DeleteComment">Usuń komentarz</FluentButton>
        }
        else if (UserId == Position.UserId)
        {
            <p>Komentarz: @Position.Comment</p>
        }
        //TODO usuwanie i edycja komentarza
    }

    @if (UserId == OrdererId && Position.Comment == null)
    {
        //<AddComment PositionId="(int)Position.Id" />
        <EditForm Model="@Model">
            <FluentTextArea @bind-Value="Model.comment" />
            <FluentButton Appearance="Appearance.Accent" OnClick="@PostComment">Dodaj komentarz</FluentButton>
        </EditForm>
    }
    @if (UserId == OrdererId)
    {
        if (Position.IsPaid)
        {
            <FluentButton Appearance="Appearance.Accent" OnClick="@SetAsUnpaid">Oznacz jako nie zapłacone</FluentButton>
        }
        else
        {
            <FluentButton Appearance="Appearance.Accent" OnClick="SetAsPaid">Oznacz jako zapłacone</FluentButton>
        }
    }
    @if (UserId == Position.UserId && !IsClosed)
    {
        <FluentButton @onclick="@DeletePosition">Usuń pozycje</FluentButton>
    }
}

@code {
    [Parameter]
    public int? PositionId{ get; set; }
    [Parameter]
    public string? UserId { get; set; }
    [Parameter]
    public string? OrdererId { get; set; }
    [Parameter]
    public bool IsClosed { get; set; }
    [Parameter]
    public OrderPositions Parent{ get; set; }

    private Comment? Model = new Comment();
    public OrderPositionModel Position { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPosition();
    }
    private async Task LoadPosition()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
            Position = await httpClient.GetFromJsonAsync<OrderPositionModel>($"api/OrderPosition/{PositionId}/GetById");
        }
        catch (Exception ex) { ToastService.ShowError("Wystąpił błąd.", 500); }
    }
    private async Task ReloadPosition()
    {
        await Parent.ReloadPositions();
        await LoadPosition();
        this.StateHasChanged();
    }
    private async Task DeleteComment()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
            Position.Comment = null;

            var response = await httpClient.PutAsJsonAsync($"api/OrderPosition/{Position.Id}", Position);
            if (!response.IsSuccessStatusCode)
                ToastService.ShowError("Wystąpił błąd.", 500);
            else
                await ReloadPosition();
        }
        catch (Exception ex) { }
    }
    private async Task SetAsPaid()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
            var response = await httpClient.PutAsJsonAsync($"api/OrderPosition/{Position.Id}/SetIsPaid/true", Position);
            if (!response.IsSuccessStatusCode)
                ToastService.ShowError("Wystąpił błąd.", 500);
            else
                await ReloadPosition();
        }
        catch (Exception ex) { }
    }
    private async Task SetAsUnpaid()
    {     
        try
        {
            var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
            var response = await httpClient.PutAsJsonAsync($"api/OrderPosition/{Position.Id}/SetIsPaid/false", Position);
            if (!response.IsSuccessStatusCode)
                ToastService.ShowError("Wystąpił błąd.", 500);
            else
                await ReloadPosition();
        }
        catch (Exception ex) { }
    }
    private async Task EditAsync()
    {

        var data = new OrderPositionModel(Position);

        var dialog = await DialogService.ShowDialogAsync<EditPosition>(data, new DialogParameters()
            {
                Height = "400px",
                //Title = $"Edycja pozycji",
                PreventDismissOnOverlayClick = false,
                PreventScroll = true,
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var comment = Position.Comment;
            Position = (OrderPositionModel)result.Data;
            Position.Comment = comment;
            await UpdatePosition();
        }

    }
    private async Task UpdatePosition()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
            var response = await httpClient.PutAsJsonAsync($"api/OrderPosition/{Position.Id}", Position);
            if (!response.IsSuccessStatusCode)
                ToastService.ShowError("Wystąpił błąd.", 500);
            else
                await ReloadPosition();
        }
        catch (Exception ex) { }
    }
    private async Task DeletePosition()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
            var respone = await httpClient.DeleteAsync($"api/OrderPosition/{PositionId}");
            if (respone.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Usunięto pozycje z zamówienia.", 500);
                await Parent.ReloadPositions();
            }
            else
            {
                ToastService.ShowError("Błąd podczas usuwania.", 500);
            }
        }
        catch (Exception ex) { } 
    }

    private async Task PostComment()
    {
        Position.Comment = Model.comment;
        try
        {
            var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
            var response = await httpClient.PutAsJsonAsync($"api/OrderPosition/{PositionId}", Position);
            if (response.IsSuccessStatusCode)
            {
                Model = new Comment();
                await ReloadPosition();
            }
            else
                ToastService.ShowError("Wystąpił błąd.", 500);
        }
        catch (Exception ex) { }
    }

    public class Comment
    {
        public string comment;
    }
}
