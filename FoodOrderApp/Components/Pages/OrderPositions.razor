@using FoodOrderApp.Models
@using System.Net
@using Newtonsoft.Json
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject TeamsUserCredential teamsUserCredential
@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService
@inject IToastService ToastService
<FluentAccordion>
    @if (!IsClosed)
    {
        <FluentAccordionItem Heading="Dodawanie pozycji">
            <EditForm Model="@position" OnSubmit="@SubmitPosition">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div>
                    Treść zamowienia:
                    <InputText @bind-Value="position.Position" />
                </div>
                <div>
                    Dodatki(opcjonalne):
                    <InputText @bind-Value="position.Additives" />
                </div>
                <div>
                    Koszt:
                    <InputNumber @bind-Value="position.Cost" />
                </div>
                <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Submit">Dodaj Pozycję</FluentButton>
            </EditForm>
        </FluentAccordionItem>
    } 
    <FluentAccordionItem Heading="Pozycje">
        @if (orderPositions == null)
        {
            <p>Ładowanie</p>
        }
        else if (orderPositions.Count == 0)
        {
            <p>Brak pozycji</p>
        }
        else
        {
            @foreach (int? positionId in orderPositions)
            {
                <OrderPositionDetails OrdererId="@OrdererId" PositionId="positionId" UserId="@UserId" IsClosed="IsClosed" Parent="@this"/>
            }
        }
    </FluentAccordionItem>
</FluentAccordion>



@code {
    [Parameter]
    public int? OrderId{ get; set; }
    [Parameter]
    public string? UserId { get; set; }
    [Parameter]
    public bool IsClosed{ get; set; }
    [Parameter]
    public string? OrdererId { get; set; }
    [Parameter]
    public OrderDetails Parent { get; set; }
    public string? Comment;
    private List<int?> orderPositions = new List<int?>();

    public OrderPositionModel position = new OrderPositionModel();
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadPositions();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7230/orderHub"))
            .Build();
        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception on starting connection: {ex.Message}");
        }
        hubConnection.On("ReceivePositionChange", async () =>
        {
            Console.WriteLine("Received");
            await ReloadPositions();
        });
    }
    public async Task ReloadPositions()
    {
        await LoadPositions();
        await Parent.ReLoadOrder();
        await InvokeAsync(StateHasChanged);

    }
    private async Task LoadPositions()
    {

        if (OrdererId == UserId)
            await LoadAllPositions();
        else
            await LoadUserPositions();
        //await Parent.ReLoadOrder();
        this.StateHasChanged();
    }
    private async Task LoadAllPositions()
    {
        Console.WriteLine("LoadingAll");
        orderPositions = null;
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var response = await httpClient.GetAsync($"api/OrderPosition/{OrderId}");
        if (response.StatusCode == HttpStatusCode.NoContent)
        {
            orderPositions = new List<int?>();
            return;
        }
        response.EnsureSuccessStatusCode();

        var jsonResponse = await response.Content.ReadAsStringAsync();

        orderPositions = JsonConvert.DeserializeObject<List<int?>>(jsonResponse);
        Console.WriteLine(orderPositions.Count);
    }
    private async Task LoadUserPositions()
    {
        Console.WriteLine("LoadingUser");
        orderPositions = null;
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var response = await httpClient.GetAsync($"api/OrderPosition/{OrderId}/GetUserPositionsForOrder/{UserId}");
        if (response.StatusCode == HttpStatusCode.NoContent)
        {
            orderPositions = new List<int?>();
            return;
        }
        response.EnsureSuccessStatusCode();

        var jsonResponse = await response.Content.ReadAsStringAsync();

        orderPositions = JsonConvert.DeserializeObject<List<int?>>(jsonResponse);
        Console.WriteLine(orderPositions.Count);
    }
    private async Task SubmitPosition()
    {
        var user = await teamsUserCredential.GetUserInfoAsync();
        position.UserId = user.ObjectId;
        position.UserName = user.DisplayName;
        position.OrderId = (int)OrderId;
        //Console.WriteLine(orderId);
        try
        {
            var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
            var response = await httpClient.PostAsJsonAsync("api/OrderPosition", position);
            //await LoadPositions();
            if (response.IsSuccessStatusCode)
            {
                position = new OrderPositionModel();
                ToastService.ShowSuccess("Dodano pozycje do zamówienia.");
                await LoadPositions();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                ToastService.ShowError("Nie dodano pozycji. Zamówienie nie istnieje.");
            }    
        }
        catch (Exception ex){}
    }
}
