@using FoodOrderApp.Models
@using System.Net
@using Newtonsoft.Json

@inject TeamsUserCredential teamsUserCredential
@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService
@inject IToastService ToastService
<FluentAccordion>
    @if (!IsClosed)
    {
        <FluentAccordionItem Heading="Dodawanie pozycji">
            <EditForm Model="@position" OnSubmit="@SubmitPosition">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div>
                    Treść zamowienia:
                    <InputText @bind-Value="position.Position" />
                </div>
                <div>
                    Dodatki:
                    <InputText @bind-Value="position.Additives" />
                </div>
                <div>
                    Koszt:
                    <InputNumber @bind-Value="position.Cost" />
                </div>
                <FluentButton Type="ButtonType.Submit">Dodaj Pozycję</FluentButton>
            </EditForm>
        </FluentAccordionItem>
    } 
    <FluentAccordionItem Heading="Pozycje">
        @if (orderPositions == null)
        {
            <p>Ładowanie</p>
        }
        else if (orderPositions.Count == 0)
        {
            <p>Brak pozycji</p>
        }
        else
        {
            @foreach (OrderPositionModel position in orderPositions)
            {
                <hr />
                if(UserId == position.UserId)
                {
                    <FluentButton Appearance="Appearance.Accent" OnClick="@(e=>EditAsync(position))">Edit</FluentButton>
                }
                <p>Uzytkownik: @position.UserId</p>
                <p>Tresc zamowienia: @position.Position</p>
                if (position.Additives != null)
                {
                    <p>Dodatki: @position.Additives</p>
                }
                <p>Koszt: @position.Cost</p>
                if(UserId == position.UserId && position.Comment != null)
                {
                    <p>Komentarz: @position.Comment</p>
                }
                if (UserId == position.UserId && !IsClosed)
                {
                    <button @onclick="@(e => DeletePosition((int)position.Id))">Usuń</button>
                }
                if (UserId == OrdererId && position.Comment == null)
                {
                   <AddComment PositionId="(int)position.Id" />
                }
                @if (UserId == OrdererId)
                {
                    if (position.IsPaid)
                    {
                        <FluentButton OnClick="@(e => SetAsUnpaid(position))">Oznacz jako nie zapłacone</FluentButton>
                    }
                    else
                    {
                        <FluentButton OnClick="@(e => SetAsPaid(position))">Oznacz jako zapłacone</FluentButton>
                    }
                }
            }
        }
    </FluentAccordionItem>
</FluentAccordion>



@code {
    [Parameter]
    public int? OrderId{ get; set; }
    [Parameter]
    public string? UserId { get; set; }
    [Parameter]
    public bool IsClosed{ get; set; }
    [Parameter]
    public string? OrdererId { get; set; }
    [Parameter]
    public OrderDetails Parent { get; set; }
    public string? Comment;
    private List<OrderPositionModel> orderPositions;
    public OrderPositionModel position = new OrderPositionModel();


    protected override async Task OnInitializedAsync()
    {
        await LoadPositions();
    }
    private async Task LoadPositions()
    {
        await Parent.ReLoadOrder();
        if (OrdererId == UserId)
            await LoadAllPositions();
        else
            await LoadUserPositions();
    }
    private async Task LoadAllPositions()
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        //orderPositions = await httpClient.GetFromJsonAsync<List<OrderPositionModel>>($"api/OrderPosition/{OrderId}");
        var response = await httpClient.GetAsync($"api/OrderPosition/{OrderId}");
        if (response.StatusCode == HttpStatusCode.NoContent)
        {
            orderPositions = new List<OrderPositionModel>();
            return;
        }
        response.EnsureSuccessStatusCode();

        var jsonResponse = await response.Content.ReadAsStringAsync();

        orderPositions = JsonConvert.DeserializeObject<List<OrderPositionModel>>(jsonResponse);
    }
    private async Task LoadUserPositions()
    {
        //await Parent.ReLoadOrders();
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var response = await httpClient.GetAsync($"api/OrderPosition/{OrderId}/GetUserPositionsForOrder/{UserId}");
        if (response.StatusCode == HttpStatusCode.NoContent)
        {
            orderPositions = new List<OrderPositionModel>();
            return;
        }
        response.EnsureSuccessStatusCode();

        var jsonResponse = await response.Content.ReadAsStringAsync();

        orderPositions = JsonConvert.DeserializeObject<List<OrderPositionModel>>(jsonResponse);
    }
    private async Task SubmitPosition()
    {
        position.UserId = UserId;
        position.OrderId = (int)OrderId;
        //Console.WriteLine(orderId);
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var response = await httpClient.PostAsJsonAsync("api/OrderPosition", position);
        //await LoadPositions();
        if (response.IsSuccessStatusCode)
        {
            position = new OrderPositionModel();
            ToastService.ShowSuccess("Dodano pozycje do zamówienia.",500);
        }

        await LoadPositions();
    }
    private async Task DeletePosition(int positionId)
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var respone = await httpClient.DeleteAsync($"api/OrderPosition/{positionId}");
        if (respone.IsSuccessStatusCode)
        {
            ToastService.ShowSuccess("Usunięto pozycje z zamówienia.",500);
            await LoadPositions();
        }
    }
    private async Task AddComment(int positionId, OrderPositionModel position)
    {
        position.Comment = Comment;
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var response = await httpClient.PutAsJsonAsync($"api/OrderPosition", position);
        if(response.IsSuccessStatusCode)
            await LoadPositions();
    }
    /*private async Task GetUserInfo(string userId)
        {
        //var user = await teamsUserCredential.
    }*/
    private async Task SetAsPaid(OrderPositionModel position)
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var response = await httpClient.PutAsJsonAsync($"api/OrderPosition/{position.Id}/SetIsPaid/true", position);
        await LoadPositions();
    }
    private async Task SetAsUnpaid(OrderPositionModel position)
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var response = await httpClient.PutAsJsonAsync($"api/OrderPosition/{position.Id}/SetIsPaid/false", position);
        await LoadPositions();
    }
    private async Task EditAsync(OrderPositionModel position)
    {

        var data = new OrderPositionModel(position);

        var dialog = await DialogService.ShowDialogAsync<EditPosition>(data, new DialogParameters()
            {
                Height = "400px",
                //Title = $"Edycja pozycji",
                PreventDismissOnOverlayClick = false,
                PreventScroll = true,
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var comment = position.Comment;
            position = (OrderPositionModel)result.Data;
            position.Comment = comment;
            await UpdatePosition(position);
        }

    }
    private async Task UpdatePosition(OrderPositionModel position)
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var response = await httpClient.PutAsJsonAsync($"api/OrderPosition/{position.Id}", position);
        await LoadPositions();
    }
}
