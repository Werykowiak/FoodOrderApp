@using FoodOrderApp.Models
@inject IHttpClientFactory HttpClientFactory

<FluentAccordion>
    <FluentAccordionItem Heading="Dodawanie pozycji">
        <EditForm Model="@position" OnSubmit="@SubmitPosition">
            <div>
                Treść zamowienia:
                <InputText @bind-Value="position.Position" />
            </div>
            <div>
                Dodatki:
                <InputText @bind-Value="position.Additives" />
            </div>
            <div>
                Koszt:
                <InputNumber @bind-Value="position.Cost" />
            </div>
            <FluentButton Type="ButtonType.Submit">Dodaj Pozycję</FluentButton>
        </EditForm>
    </FluentAccordionItem>
    <FluentAccordionItem Heading="Pozycje" @onclick="LoadPositions">
        @if (orderPositions == null)
        {
            <p>Ładowanie</p>
        }
        else if (orderPositions.Count == 0)
        {
            <p>Brak pozycji</p>
        }
        else
        {
            @foreach (OrderPositionModel position in orderPositions)
            {
                <hr />
                <p>Uzytkownik: @position.User</p>
                <p>Tresc zamowienia: @position.Position</p>
                if (position.Additives != null)
                {
                    <p>Dodatki: @position.Additives</p>
                }
                <p>Koszt: @position.Cost</p>
                if (userId == position.User)
                {
                    <button @onclick="@(e => DeletePosition((int)position.Id))">Usuń</button>
                }    
            }
        }
    </FluentAccordionItem>
</FluentAccordion>



@code {
    [Parameter]
    public int? orderId{ get; set; }
    [Parameter]
    public string? userId { get; set; }
    [Parameter]
    public Orders Parent { get; set; }

    private List<OrderPositionModel> orderPositions;
    public OrderPositionModel position = new OrderPositionModel();

    private async Task LoadPositions()
    {
        await Parent.ReLoadOrders();
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        orderPositions = await httpClient.GetFromJsonAsync<List<OrderPositionModel>>($"api/OrderPosition/{orderId}");
    }

    private async Task SubmitPosition()
    {
        position.User = userId;
        position.OrderId = (int)orderId;
        //Console.WriteLine(orderId);
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var response = await httpClient.PostAsJsonAsync("api/OrderPosition", position);
        //await LoadPositions();
        if (response.IsSuccessStatusCode)
        {
            position = new OrderPositionModel();
        }
        await LoadPositions();
    }
    private async Task DeletePosition(int positionId)
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var respone = await httpClient.DeleteAsync($"api/OrderPosition/{positionId}");
        await LoadPositions();
    }
}
