@using FoodOrderApp.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService
@inject IToastService ToastService

<h3>OrderDetails</h3>
@if (Order == null)
{
    <p>Ładowanie</p>
}
else
{
    @if (UserId == Order.Orderer)
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="@(e=>EditAsync())">Edit</FluentButton>
    }
    <p>Zamawiający: @Order.OrdererName</p>
    <p>Restauracja: @Order.RestaurantName</p>
    <p>Minimalna wartość zamówienia: @Order.MinCost zł</p>
    <p>Aktualna wartość zamówienia: @Order.CurrentCost zł</p>
    @if (Order.MinCost - Order.CurrentCost > 0)
    {
        <p style="color:red">Aby można było zamówić brakuje: @(Math.Round((decimal)(Order.MinCost - Order.CurrentCost), 2)) zł</p>
    }
    else
    {
        <p>Masz do zapłaty: @Cost zł</p>
    }
    @if (Order.MinCostForFreeDelivery != null)
    {
        if (Order.MinCostForFreeDelivery - Order.CurrentCost > 0)
        {
            <p>Opłata za dowóz: @Order.DeliveryFee zł</p>
            <p >Do darmowej dostawy brakuje: @(Order.MinCostForFreeDelivery - Order.CurrentCost) zł</p>
        }
        else
        {
            <p style="color:green">Dostawa jest darmowa</p>
        }
    }
    else
    {
        <p>Opłata za dowóz: @Order.DeliveryFee zł</p>
    }
    <p>Numer telefonu zamawiającego: @Order.PhoneNumber</p>
    <p>Numer konta do zapłaty: @Order.AccountNumber</p>
    @if (UserId == Order.Orderer)
    {
        if (Order.IsClosed)
        {
            <FluentButton Appearance="Appearance.Accent" OnClick="@(e => OpenOrder())">Otwórz ponownie zamówienie</FluentButton>
            <FluentButton Appearance="Appearance.Accent" OnClick="DeleteOrder">Usuń zamówienie</FluentButton>
        }
        else
        {
            <FluentButton Appearance="Appearance.Accent" OnClick="@(e => CloseOrder())">Zamknij zamówienie</FluentButton>
        }
    }
    <OrderPositions OrderId="@OrderId" UserId="@UserId" IsClosed="@Order.IsClosed" OrdererId="@Order.Orderer" Parent="@this"/>
}
@code {
    [Parameter]
    public string? UserId { get; set; }
    [Parameter]
    public int OrderId { get; set; }
    public OrderModel Order { get; set; }
    private double Cost { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadOrder();
    }
    public async Task LoadOrder()
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        Order = await httpClient.GetFromJsonAsync<OrderModel>($"api/OrderModels/{OrderId}");
        await GetCost();
    }
    public async Task ReLoadOrder()
    {
        Order = new OrderModel();
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        Order = await httpClient.GetFromJsonAsync<OrderModel>($"api/OrderModels/{OrderId}");
        await GetCost();
        this.StateHasChanged();
    }
    private async Task CloseOrder()
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var response = await httpClient.PutAsJsonAsync($"api/OrderModels/{OrderId}/ChangeState/true", Order);
        if (response.IsSuccessStatusCode)
        {
            await ReLoadOrder();
        }
    }
    private async Task OpenOrder()
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var response = await httpClient.PutAsJsonAsync($"api/OrderModels/{OrderId}/ChangeState/false", Order);
        if (response.IsSuccessStatusCode)
        {
            await ReLoadOrder();
        }
    }
    private async Task EditAsync()
    {

        var data = new OrderModel(Order);

        var dialog = await DialogService.ShowDialogAsync<EditOrder>(data, new DialogParameters()
            {
                Height = "400px",
                //Title = $"Edycja pozycji",
                PreventDismissOnOverlayClick = false,
                PreventScroll = true,
            });
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            Order = (OrderModel)result.Data;
            await UpdateOrder(Order);
        }
        await GetCost();
    }
    private async Task UpdateOrder(OrderModel order)
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var result = await httpClient.PutAsJsonAsync($"api/OrderModels/{order.Id}", order);
    }
    private async Task GetCost()
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var ordersCost = await httpClient.GetFromJsonAsync<double>($"api/OrderModels/{OrderId}/GetUserCostForOrder/{UserId}");
        Cost = Math.Round(ordersCost, 2);
    }
    private async Task DeleteOrder()
    {
        var httpClient = HttpClientFactory.CreateClient("FoodOrderApi");
        var response = await httpClient.DeleteAsync($"api/OrderModels/{OrderId}");
        if(response.IsSuccessStatusCode)
            ToastService.ShowSuccess("Usunięto zamówienie.", 5000);
    }
}
